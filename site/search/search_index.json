{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"WelCome To MWiki \u00b6 \u6b22\u8fce\u6765\u5230MWiki,\u4e0d\u65ad\u5b8c\u5584ing!","title":"Getting Starting"},{"location":"#welcome-to-mwiki","text":"\u6b22\u8fce\u6765\u5230MWiki,\u4e0d\u65ad\u5b8c\u5584ing!","title":"WelCome To MWiki"},{"location":"Start/about/","text":"\u5173\u4e8e\u672c\u9879\u76ee \u00b6 \u53ea\u662f\u60f3\u505a\u4e00\u4e2a\u6bd4\u8f83\u5168\u9762\u7684\u7b97\u6cd5\u5b8c\u5584\u7f51\u7ad9,\u4e00\u5f00\u59cb\u53ea\u662f\u4e3a\u4e86\u5199\u4e00\u4e9b\u603b\u7ed3,\u540e\u6765\u4e00\u60f3,\u4e3a\u4ec0\u4e48\u4e0d\u5e72\u8106\u505a\u4e00\u4e2aOI-Wiki\u5462? \u4e8e\u662f\u8fd9\u4e2a\u7f51\u7ad9\u5c31\u8bde\u751f\u4e86!","title":"\u5173\u4e8e\u672c\u9879\u76ee"},{"location":"Start/about/#_1","text":"\u53ea\u662f\u60f3\u505a\u4e00\u4e2a\u6bd4\u8f83\u5168\u9762\u7684\u7b97\u6cd5\u5b8c\u5584\u7f51\u7ad9,\u4e00\u5f00\u59cb\u53ea\u662f\u4e3a\u4e86\u5199\u4e00\u4e9b\u603b\u7ed3,\u540e\u6765\u4e00\u60f3,\u4e3a\u4ec0\u4e48\u4e0d\u5e72\u8106\u505a\u4e00\u4e2aOI-Wiki\u5462? \u4e8e\u662f\u8fd9\u4e2a\u7f51\u7ad9\u5c31\u8bde\u751f\u4e86!","title":"\u5173\u4e8e\u672c\u9879\u76ee"},{"location":"graph/\u4e09\u5143\u73af\u8ba1\u6570/","text":"\u4e09\u5143\u73af\u8ba1\u6570 \u00b6 \u6700\u8fd1\u6b63\u597d\u8003\u8bd5\u78b0\u5230\u4e86,\u60f3\u8d77\u6765\u81ea\u5df1\u597d\u50cf\u5df2\u7ecf\u5fd8\u4e86\u600e\u4e48\u505a,\u5c31\u91cd\u65b0\u5199\u4e00\u4e0b\u5427. \u9898\u76ee\u5f15\u5165 \u00b6 \u7ed9\u4f60\u4e00\u4e2a n \u4e2a\u70b9 m \u6761\u8fb9\u7684\u56fe,\u6c42\u4e09\u5143\u73af\u7684\u4e2a\u6570. Solution1 \u00b6 \u505a\u6cd5 \u00b6 \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u56fe\u5ea6\u6570> \\sqrt{m} \\sqrt{m} \u7684\u70b9\u6700\u591a\u53ea\u6709 \\sqrt{m} \\sqrt{m} \u4e2a. \u7136\u540e\u679a\u4e3e\u8fb9\u5927\u529b\u8ba8\u8bba\u4e00\u6ce2: d_y>\\sqrt{m} d_y>\\sqrt{m} ,\u76f4\u63a5\u679a\u4e3ex\u7684\u51fa\u8fb9\u7684\u70b9. d_y<=\\sqrt{m} d_y<=\\sqrt{m} ,\u66b4\u529b\u626b y y \u7684\u51fa\u8fb9,\u5224\u65ad\u4e0e x x \u662f\u5426\u8fde\u8fb9 \u590d\u6742\u5ea6 \u00b6 \u8fd9\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u5f88\u663e\u7136\u662f m\\sqrt{m} m\\sqrt{m} \u7684\u5bf9\u5427.\u5176\u5b9e\u5c31\u662f\u6211\u4eec\u901a\u8fc7\u679a\u4e3e\u70b9\u8fbe\u5230\u679a\u4e3e\u8fb9\u7684\u6548\u679c. \u7a7a\u95f4\u7684\u8bdd\u662f\u7ebf\u6027\u7684. Solution2 \u00b6 \u8003\u8651\u91cd\u5b9a\u5411\u8fb9,\u8bbe\u70b9 i i \u7684\u51fa\u5ea6\u4e3a d_i d_i ,\u90a3\u4e48: \u5982\u679c d_u d_u < d_v d_v \u6216\u8005 d_u==d_v d_u==d_v && u<v u<v ,\u8fde u u - v v \u8fde v v - u u \u5c31\u597d\u4e86. \u9898\u76ee\u6765\u6e90: hdu6184:Counting Stars \u4ee3\u7801\u5b9e\u73b0 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 /* mail: mleautomaton@foxmail.com author: MLEAutoMaton This Code is made by MLEAutoMaton */ #include <stdio.h> #include <stdlib.h> #include <string.h> #include <math.h> #include <algorithm> #include <queue> #include <set> #include <map> #include <iostream> using namespace std ; #define ll long long #define re register #define file(a) freopen(a\".in\",\"r\",stdin);freopen(a\".out\",\"w\",stdout) inline int gi () { int f = 1 , sum = 0 ; char ch = getchar (); while ( ch > '9' || ch < '0' ){ if ( ch == '-' ) f =- 1 ; ch = getchar ();} while ( ch >= '0' && ch <= '9' ){ sum = ( sum << 3 ) + ( sum << 1 ) + ch - '0' ; ch = getchar ();} return f * sum ; } const int N = 300010 ; set < ll > st ; int n , m , d [ N ], vis [ N ], B ; namespace cpp1 { vector < int > G [ N ]; int bl [ N ]; void main () { while ( scanf ( \"%d%d\" , & n , & m ) == 2 ) { st . clear (); B = sqrt ( m ); ll ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { G [ i ]. clear (); d [ i ] = 0 ; bl [ i ] = 0 ; vis [ i ] = 0 ; } for ( int i = 1 ; i <= m ; i ++ ) { int u = gi (), v = gi (); G [ u ]. push_back ( v ); G [ v ]. push_back ( u ); d [ u ] ++ ; d [ v ] ++ ; st . insert ( 1ll * u * n + v ); st . insert ( 1ll * v * n + u ); } for ( int u = 1 ; u <= n ; u ++ ) { vis [ u ] = 1 ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) bl [ G [ u ][ i ]] = u ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { int v = G [ u ][ i ]; if ( vis [ v ]) continue ; ll sum = 0 ; if ( d [ v ] <= B ) { for ( int j = 0 ; j < G [ v ]. size (); j ++ ) { int z = G [ v ][ j ]; if ( bl [ z ] == u ) sum ++ ; } } else { for ( int j = 0 ; j < G [ u ]. size (); j ++ ) { int z = G [ u ][ j ]; if ( st . find ( 1ll * z * n + v ) != st . end ()) sum ++ ; } } ans = ( ans + sum * ( sum - 1 ) / 2 ); } } printf ( \"%lld \\n \" , ans ); } } } namespace cpp2 { int x [ N ], y [ N ], pos [ N ], bl [ N ]; typedef pair < int , int > pii ; #define mp make_pair vector < pii > G [ N ]; ll cnt [ N ]; void main () { while ( scanf ( \"%d%d\" , & n , & m ) == 2 ) { st . clear (); B = sqrt ( m ); ll ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { G [ i ]. clear (); d [ i ] = 0 ; bl [ i ] = 0 ; pos [ i ] = 0 ; } for ( int i = 0 ; i < m ; i ++ ) { int u = gi (), v = gi (); x [ i ] = u , y [ i ] = v ; d [ u ] ++ ; d [ v ] ++ ; } for ( int i = 0 ; i < m ; i ++ ) { cnt [ i ] = 0 ; int u = x [ i ], v = y [ i ]; if ( d [ u ] < d [ v ]) G [ u ]. push_back ( mp ( v , i )); if ( d [ u ] > d [ v ]) G [ v ]. push_back ( mp ( u , i )); if ( d [ u ] == d [ v ]) { if ( u < v ) G [ u ]. push_back ( mp ( v , i )); else G [ v ]. push_back ( mp ( u , i )); } } for ( int i = 0 ; i < m ; i ++ ){ int u = x [ i ], v = y [ i ]; for ( auto vp : G [ u ]) pos [ vp . first ] = vp . second , bl [ vp . first ] = i + 1 ; for ( auto vp : G [ v ]){ int vv = vp . first ; if ( bl [ vv ] == i + 1 ){ cnt [ i ] ++ ; cnt [ pos [ vv ]] ++ ; cnt [ vp . second ] ++ ; } } } for ( int i = 0 ; i < m ; i ++ ) ans = ( ans + 1ll * cnt [ i ] * ( cnt [ i ] - 1 ) / 2 ); printf ( \"%lld \\n \" , ans ); } } } int main () { #ifndef ONLINE_JUDGE freopen ( \"in.in\" , \"r\" , stdin ); freopen ( \"out.out\" , \"w\" , stdout ); #endif cpp2 :: main (); return 0 ; } \u9898\u76ee \u00b6 \u5f85\u8865\u5145 \u53c2\u8003\u8d44\u6599 \u00b6 Tyher\u7684Blog","title":"\u4e09\u5143\u73af\u8ba1\u6570"},{"location":"graph/\u4e09\u5143\u73af\u8ba1\u6570/#_1","text":"\u6700\u8fd1\u6b63\u597d\u8003\u8bd5\u78b0\u5230\u4e86,\u60f3\u8d77\u6765\u81ea\u5df1\u597d\u50cf\u5df2\u7ecf\u5fd8\u4e86\u600e\u4e48\u505a,\u5c31\u91cd\u65b0\u5199\u4e00\u4e0b\u5427.","title":"\u4e09\u5143\u73af\u8ba1\u6570"},{"location":"graph/\u4e09\u5143\u73af\u8ba1\u6570/#_2","text":"\u7ed9\u4f60\u4e00\u4e2a n \u4e2a\u70b9 m \u6761\u8fb9\u7684\u56fe,\u6c42\u4e09\u5143\u73af\u7684\u4e2a\u6570.","title":"\u9898\u76ee\u5f15\u5165"},{"location":"graph/\u4e09\u5143\u73af\u8ba1\u6570/#solution1","text":"","title":"Solution1"},{"location":"graph/\u4e09\u5143\u73af\u8ba1\u6570/#_3","text":"\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u56fe\u5ea6\u6570> \\sqrt{m} \\sqrt{m} \u7684\u70b9\u6700\u591a\u53ea\u6709 \\sqrt{m} \\sqrt{m} \u4e2a. \u7136\u540e\u679a\u4e3e\u8fb9\u5927\u529b\u8ba8\u8bba\u4e00\u6ce2: d_y>\\sqrt{m} d_y>\\sqrt{m} ,\u76f4\u63a5\u679a\u4e3ex\u7684\u51fa\u8fb9\u7684\u70b9. d_y<=\\sqrt{m} d_y<=\\sqrt{m} ,\u66b4\u529b\u626b y y \u7684\u51fa\u8fb9,\u5224\u65ad\u4e0e x x \u662f\u5426\u8fde\u8fb9","title":"\u505a\u6cd5"},{"location":"graph/\u4e09\u5143\u73af\u8ba1\u6570/#_4","text":"\u8fd9\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u5f88\u663e\u7136\u662f m\\sqrt{m} m\\sqrt{m} \u7684\u5bf9\u5427.\u5176\u5b9e\u5c31\u662f\u6211\u4eec\u901a\u8fc7\u679a\u4e3e\u70b9\u8fbe\u5230\u679a\u4e3e\u8fb9\u7684\u6548\u679c. \u7a7a\u95f4\u7684\u8bdd\u662f\u7ebf\u6027\u7684.","title":"\u590d\u6742\u5ea6"},{"location":"graph/\u4e09\u5143\u73af\u8ba1\u6570/#solution2","text":"\u8003\u8651\u91cd\u5b9a\u5411\u8fb9,\u8bbe\u70b9 i i \u7684\u51fa\u5ea6\u4e3a d_i d_i ,\u90a3\u4e48: \u5982\u679c d_u d_u < d_v d_v \u6216\u8005 d_u==d_v d_u==d_v && u<v u<v ,\u8fde u u - v v \u8fde v v - u u \u5c31\u597d\u4e86. \u9898\u76ee\u6765\u6e90: hdu6184:Counting Stars","title":"Solution2"},{"location":"graph/\u4e09\u5143\u73af\u8ba1\u6570/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 /* mail: mleautomaton@foxmail.com author: MLEAutoMaton This Code is made by MLEAutoMaton */ #include <stdio.h> #include <stdlib.h> #include <string.h> #include <math.h> #include <algorithm> #include <queue> #include <set> #include <map> #include <iostream> using namespace std ; #define ll long long #define re register #define file(a) freopen(a\".in\",\"r\",stdin);freopen(a\".out\",\"w\",stdout) inline int gi () { int f = 1 , sum = 0 ; char ch = getchar (); while ( ch > '9' || ch < '0' ){ if ( ch == '-' ) f =- 1 ; ch = getchar ();} while ( ch >= '0' && ch <= '9' ){ sum = ( sum << 3 ) + ( sum << 1 ) + ch - '0' ; ch = getchar ();} return f * sum ; } const int N = 300010 ; set < ll > st ; int n , m , d [ N ], vis [ N ], B ; namespace cpp1 { vector < int > G [ N ]; int bl [ N ]; void main () { while ( scanf ( \"%d%d\" , & n , & m ) == 2 ) { st . clear (); B = sqrt ( m ); ll ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { G [ i ]. clear (); d [ i ] = 0 ; bl [ i ] = 0 ; vis [ i ] = 0 ; } for ( int i = 1 ; i <= m ; i ++ ) { int u = gi (), v = gi (); G [ u ]. push_back ( v ); G [ v ]. push_back ( u ); d [ u ] ++ ; d [ v ] ++ ; st . insert ( 1ll * u * n + v ); st . insert ( 1ll * v * n + u ); } for ( int u = 1 ; u <= n ; u ++ ) { vis [ u ] = 1 ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) bl [ G [ u ][ i ]] = u ; for ( int i = 0 ; i < G [ u ]. size (); i ++ ) { int v = G [ u ][ i ]; if ( vis [ v ]) continue ; ll sum = 0 ; if ( d [ v ] <= B ) { for ( int j = 0 ; j < G [ v ]. size (); j ++ ) { int z = G [ v ][ j ]; if ( bl [ z ] == u ) sum ++ ; } } else { for ( int j = 0 ; j < G [ u ]. size (); j ++ ) { int z = G [ u ][ j ]; if ( st . find ( 1ll * z * n + v ) != st . end ()) sum ++ ; } } ans = ( ans + sum * ( sum - 1 ) / 2 ); } } printf ( \"%lld \\n \" , ans ); } } } namespace cpp2 { int x [ N ], y [ N ], pos [ N ], bl [ N ]; typedef pair < int , int > pii ; #define mp make_pair vector < pii > G [ N ]; ll cnt [ N ]; void main () { while ( scanf ( \"%d%d\" , & n , & m ) == 2 ) { st . clear (); B = sqrt ( m ); ll ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { G [ i ]. clear (); d [ i ] = 0 ; bl [ i ] = 0 ; pos [ i ] = 0 ; } for ( int i = 0 ; i < m ; i ++ ) { int u = gi (), v = gi (); x [ i ] = u , y [ i ] = v ; d [ u ] ++ ; d [ v ] ++ ; } for ( int i = 0 ; i < m ; i ++ ) { cnt [ i ] = 0 ; int u = x [ i ], v = y [ i ]; if ( d [ u ] < d [ v ]) G [ u ]. push_back ( mp ( v , i )); if ( d [ u ] > d [ v ]) G [ v ]. push_back ( mp ( u , i )); if ( d [ u ] == d [ v ]) { if ( u < v ) G [ u ]. push_back ( mp ( v , i )); else G [ v ]. push_back ( mp ( u , i )); } } for ( int i = 0 ; i < m ; i ++ ){ int u = x [ i ], v = y [ i ]; for ( auto vp : G [ u ]) pos [ vp . first ] = vp . second , bl [ vp . first ] = i + 1 ; for ( auto vp : G [ v ]){ int vv = vp . first ; if ( bl [ vv ] == i + 1 ){ cnt [ i ] ++ ; cnt [ pos [ vv ]] ++ ; cnt [ vp . second ] ++ ; } } } for ( int i = 0 ; i < m ; i ++ ) ans = ( ans + 1ll * cnt [ i ] * ( cnt [ i ] - 1 ) / 2 ); printf ( \"%lld \\n \" , ans ); } } } int main () { #ifndef ONLINE_JUDGE freopen ( \"in.in\" , \"r\" , stdin ); freopen ( \"out.out\" , \"w\" , stdout ); #endif cpp2 :: main (); return 0 ; }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"graph/\u4e09\u5143\u73af\u8ba1\u6570/#_6","text":"\u5f85\u8865\u5145","title":"\u9898\u76ee"},{"location":"graph/\u4e09\u5143\u73af\u8ba1\u6570/#_7","text":"Tyher\u7684Blog","title":"\u53c2\u8003\u8d44\u6599"},{"location":"graph/\u56fe\u8bba\u4ecb\u7ecd/","text":"","title":"\u56fe\u8bba\u57fa\u672c\u5185\u5bb9"}]}